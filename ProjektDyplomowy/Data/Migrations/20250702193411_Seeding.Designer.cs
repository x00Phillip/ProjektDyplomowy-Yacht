// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjektDyplomowy.Data;

#nullable disable

namespace ProjektDyplomowy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250702193411_Seeding")]
    partial class Seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "owner-test-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2a6a6f4-dddd-4b6c-9813-83382e07dd0f",
                            Email = "owner@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER@EXAMPLE.COM",
                            NormalizedUserName = "OWNER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB3TXHivhAku6cgFenlvv67t7ugRESFb3PESnfGA79SvL/BhvHx13qcP+3MBHUZVKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5599408-94aa-4d5d-81f8-e170affdb202",
                            TwoFactorEnabled = false,
                            UserName = "owner@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentGateway")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RentalId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.RatingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.ToTable("RatingImage");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LicenseValidUntil")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RadioOperatorLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RentalEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentalStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("SailingLicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WithSkipper")
                        .HasColumnType("bit");

                    b.Property<int>("YachtId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("YachtId");

                    b.ToTable("Rental");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.SkipperLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RadioOperatorLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SkipperLicense");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.SupportMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsFromSupport")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SupportMessage");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Yacht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DailyRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasAirConditioning")
                        .HasColumnType("bit");

                    b.Property<bool>("HasKitchen")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWiFi")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LengthInMeters")
                        .HasColumnType("int");

                    b.Property<int>("MaxPersons")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfCabins")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Yacht_LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Yacht_LocationId");

                    b.ToTable("Yacht");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Beneteau",
                            DailyRate = 1200m,
                            HasAirConditioning = false,
                            HasKitchen = true,
                            HasWiFi = true,
                            Image = "/images/oceanis40.jpg",
                            LengthInMeters = 12,
                            MaxPersons = 8,
                            Model = "Oceanis 40",
                            NumberOfBathrooms = 2,
                            NumberOfCabins = 3,
                            OwnerId = "owner-test-id",
                            Type = 0,
                            Yacht_LocationId = 1,
                            Year = 2015
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Sunseeker",
                            DailyRate = 4500m,
                            HasAirConditioning = true,
                            HasKitchen = true,
                            HasWiFi = true,
                            Image = "/images/sunseeker.jpeg",
                            LengthInMeters = 16,
                            MaxPersons = 10,
                            Model = "Manhattan 52",
                            NumberOfBathrooms = 3,
                            NumberOfCabins = 4,
                            OwnerId = "owner-test-id",
                            Type = 3,
                            Yacht_LocationId = 3,
                            Year = 2020
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Lagoon",
                            DailyRate = 2800m,
                            HasAirConditioning = true,
                            HasKitchen = true,
                            HasWiFi = true,
                            Image = "/images/Lagoon450F.jpg",
                            LengthInMeters = 14,
                            MaxPersons = 12,
                            Model = "450F",
                            NumberOfBathrooms = 4,
                            NumberOfCabins = 4,
                            OwnerId = "owner-test-id",
                            Type = 2,
                            Yacht_LocationId = 2,
                            Year = 2018
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Jeanneau",
                            DailyRate = 1100m,
                            HasAirConditioning = false,
                            HasKitchen = true,
                            HasWiFi = false,
                            Image = "/images/SunOdyssey439.jpg",
                            LengthInMeters = 13,
                            MaxPersons = 9,
                            Model = "Sun Odyssey 439",
                            NumberOfBathrooms = 2,
                            NumberOfCabins = 3,
                            OwnerId = "owner-test-id",
                            Type = 0,
                            Yacht_LocationId = 1,
                            Year = 2014
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Azimut",
                            DailyRate = 5000m,
                            HasAirConditioning = true,
                            HasKitchen = true,
                            HasWiFi = true,
                            Image = "/images/Azumit50.webp",
                            LengthInMeters = 15,
                            MaxPersons = 12,
                            Model = "50 Flybridge",
                            NumberOfBathrooms = 3,
                            NumberOfCabins = 4,
                            OwnerId = "owner-test-id",
                            Type = 3,
                            Yacht_LocationId = 3,
                            Year = 2019
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Fairline",
                            DailyRate = 3800m,
                            HasAirConditioning = true,
                            HasKitchen = true,
                            HasWiFi = true,
                            Image = "/images/FairLinePhantom48.jpg",
                            LengthInMeters = 15,
                            MaxPersons = 10,
                            Model = "Phantom 48",
                            NumberOfBathrooms = 2,
                            NumberOfCabins = 3,
                            OwnerId = "owner-test-id",
                            Type = 1,
                            Yacht_LocationId = 1,
                            Year = 2013
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Bavaria",
                            DailyRate = 1500m,
                            HasAirConditioning = false,
                            HasKitchen = true,
                            HasWiFi = true,
                            Image = "/images/BavariaCruiser46.jpg",
                            LengthInMeters = 14,
                            MaxPersons = 10,
                            Model = "Cruiser 46",
                            NumberOfBathrooms = 3,
                            NumberOfCabins = 4,
                            OwnerId = "owner-test-id",
                            Type = 0,
                            Yacht_LocationId = 1,
                            Year = 2017
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Fountaine Pajot",
                            DailyRate = 6000m,
                            HasAirConditioning = true,
                            HasKitchen = true,
                            HasWiFi = true,
                            Image = "/images/FountainePajotSaba50.jpg",
                            LengthInMeters = 15,
                            MaxPersons = 14,
                            Model = "Saba 50",
                            NumberOfBathrooms = 5,
                            NumberOfCabins = 6,
                            OwnerId = "owner-test-id",
                            Type = 2,
                            Yacht_LocationId = 2,
                            Year = 2021
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Sea Ray",
                            DailyRate = 3500m,
                            HasAirConditioning = true,
                            HasKitchen = false,
                            HasWiFi = true,
                            Image = "/images/SeeRay.jfif",
                            LengthInMeters = 12,
                            MaxPersons = 8,
                            Model = "SLX 400",
                            NumberOfBathrooms = 1,
                            NumberOfCabins = 2,
                            OwnerId = "owner-test-id",
                            Type = 1,
                            Yacht_LocationId = 2,
                            Year = 2022
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Princess",
                            DailyRate = 7000m,
                            HasAirConditioning = true,
                            HasKitchen = true,
                            HasWiFi = true,
                            Image = "/images/PrincessF55.webp",
                            LengthInMeters = 17,
                            MaxPersons = 12,
                            Model = "F55",
                            NumberOfBathrooms = 4,
                            NumberOfCabins = 5,
                            OwnerId = "owner-test-id",
                            Type = 3,
                            Yacht_LocationId = 3,
                            Year = 2020
                        });
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.YachtFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YachtId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("YachtId");

                    b.ToTable("YachtFavorite");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Yacht_Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Yacht_Location");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Address = "al. Jana Pawła II 13A",
                            MapUrl = "https://g.co/kgs/LdBAsxD",
                            Name = "Gdynia Marina"
                        },
                        new
                        {
                            Id = 3,
                            Address = "6 Quai Antoine 1er",
                            MapUrl = "https://g.co/kgs/MxEKAUo",
                            Name = "Port Hercules, Monaco"
                        },
                        new
                        {
                            Id = 4,
                            Address = "21000, Bačvice, Split",
                            MapUrl = "https://g.co/kgs/vkF3t5g",
                            Name = "Split, Croatia"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Payment", b =>
                {
                    b.HasOne("ProjektDyplomowy.Models.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Rating", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.RatingImage", b =>
                {
                    b.HasOne("ProjektDyplomowy.Models.Rating", "Rating")
                        .WithMany("Images")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Rental", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektDyplomowy.Models.Yacht", "Yacht")
                        .WithMany("Rentals")
                        .HasForeignKey("YachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Yacht");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.SkipperLicense", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.SupportMessage", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Yacht", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjektDyplomowy.Models.Yacht_Location", "Yacht_Location")
                        .WithMany("Yachts")
                        .HasForeignKey("Yacht_LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Yacht_Location");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.YachtFavorite", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjektDyplomowy.Models.Yacht", "Yacht")
                        .WithMany()
                        .HasForeignKey("YachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Yacht");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Rating", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Yacht", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ProjektDyplomowy.Models.Yacht_Location", b =>
                {
                    b.Navigation("Yachts");
                });
#pragma warning restore 612, 618
        }
    }
}
